// generated by nodegen.py; do not edit

#include "node.h"
void Invalid::accept(Visitor &v)
{
	v.visit(*this);
}

Value::Value(std::string_view _value)
	: value(_value)
{
}
void NumberLiteral::accept(Visitor &v)
{
	v.visit(*this);
}
void StringLiteral::accept(Visitor &v)
{
	v.visit(*this);
}
void BooleanLiteral::accept(Visitor &v)
{
	v.visit(*this);
}
void Identifier::accept(Visitor &v)
{
	v.visit(*this);
}

FunctionCall::FunctionCall(std::unique_ptr<Expression> _name, std::vector<std::unique_ptr<Expression>> _arguments)
	: name(std::move(_name)), arguments(std::move(_arguments))
{
}
void FunctionCall::accept(Visitor &v)
{
	v.visit(*this);
}

Operator::Operator(std::string_view _symbol)
	: symbol(_symbol)
{
}

InfixOperator::InfixOperator(std::string_view symbol, std::unique_ptr<Expression> _left, std::unique_ptr<Expression> _right)
	: Operator(symbol), left(std::move(_left)), right(std::move(_right))
{
}
void InfixOperator::accept(Visitor &v)
{
	v.visit(*this);
}

PrefixOperator::PrefixOperator(std::string_view symbol, std::unique_ptr<Expression> _operand)
	: Operator(symbol), operand(std::move(_operand))
{
}
void PrefixOperator::accept(Visitor &v)
{
	v.visit(*this);
}

PostfixOperator::PostfixOperator(std::string_view symbol, std::unique_ptr<Expression> _operand)
	: Operator(symbol), operand(std::move(_operand))
{
}
void PostfixOperator::accept(Visitor &v)
{
	v.visit(*this);
}

Block::Block(std::vector<std::unique_ptr<Statement>> _statements)
	: statements(std::move(_statements))
{
}
void Block::accept(Visitor &v)
{
	v.visit(*this);
}
void Program::accept(Visitor &v)
{
	v.visit(*this);
}

VariableDef::VariableDef(std::unique_ptr<Expression> _name, std::unique_ptr<Expression> _value)
	: name(std::move(_name)), value(std::move(_value))
{
}
void VariableDef::accept(Visitor &v)
{
	v.visit(*this);
}
