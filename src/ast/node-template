abstract Node;

abstract Expression : Node;
abstract Statement : Node;

Program : Node
{
	std::vector<std::unique_ptr<Statement>> statements
};

ExprStatement : Statement
{
	std::unique_ptr<Expression> expr
};
VariableDef : Statement
{
	std::unique_ptr<Identifier> name
	std::unique_ptr<Type> type
	std::unique_ptr<Expression> value
};
FunctionDef : Statement
{
	std::unique_ptr<Identifier> name
	std::vector<std::unique_ptr<Parameter>> parameters
	std::unique_ptr<Type> return_type
	std::unique_ptr<Block> body
};

abstract Value : Expression
{
	Token token
};
abstract Literal : Value;
NumberLiteral : Literal;
StringLiteral : Literal;
BooleanLiteral : Literal;
UnitLiteral : Literal;
Identifier : Value
{
	std::shared_ptr<SymbolData> symbol
};
FunctionCall : Expression
{
	std::unique_ptr<Identifier> name
	std::vector<std::unique_ptr<Expression>> arguments
};
abstract Operator : Expression
{
	std::string_view symbol
};
InfixOperator : Operator
{
	std::unique_ptr<Expression> left
	std::unique_ptr<Expression> right
};
PrefixOperator : Operator
{
	std::unique_ptr<Expression> operand
};
PostfixOperator : Operator
{
	std::unique_ptr<Expression> operand
};
ReturnExpr : Expression
{
	std::unique_ptr<Expression> value
};
IfExpr : Expression
{
	std::unique_ptr<Expression> condition
	std::unique_ptr<Block> if_branch
	std::unique_ptr<Block> else_branch
};
WhileExpr : Expression
{
	std::unique_ptr<Expression> condition
	std::unique_ptr<Block> body
};

Invalid : Node;
Block : Statement
{
	std::vector<std::unique_ptr<Statement>> statements
};
Parameter : Node
{
	std::unique_ptr<Identifier> name
	std::unique_ptr<Type> type
};
Type : Node
{
	std::string_view value
};
