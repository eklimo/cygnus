abstract Node;
Invalid : Node;

abstract Expression : Node;
abstract Value : Expression
{
	std::string_view value
};
abstract Literal : Value;
NumberLiteral : Literal;
StringLiteral : Literal;
BooleanLiteral : Literal;
Identifier : Value;
FunctionCall : Expression
{
	std::unique_ptr<Identifier> name
	std::vector<std::unique_ptr<Expression>> arguments
};
abstract Operator : Expression
{
	std::string_view symbol
};
InfixOperator : Operator
{
	std::unique_ptr<Expression> left
	std::unique_ptr<Expression> right
};
PrefixOperator : Operator
{
	std::unique_ptr<Expression> operand
};
PostfixOperator : Operator
{
	std::unique_ptr<Expression> operand
};

abstract Statement : Node;
ExprStatement : Statement
{
	std::unique_ptr<Expression> expr
};
Block : Statement
{
	std::vector<std::unique_ptr<Statement>> statements
};
Program : Block;
VariableDef : Statement
{
	std::unique_ptr<Identifier> name
	std::unique_ptr<Expression> value
};
